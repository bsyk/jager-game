{"version":3,"sources":["PlayerInput.js","TimelineRow.js","dinner.png","App.js","serviceWorker.js","index.js"],"names":["PlayerInput","idx","player","onPlayerChange","onRemovePlayer","playerId","key","className","htmlFor","type","name","data-idx","id","value","onChange","onClick","DeleteOutline","TimelineRow","label","start","end","surprise","mode","onTimeClick","useState","reveal","setReveal","hideTimer","asTime","seconds","x","m","Math","floor","s","asMinutes","h","map","v","padStart","join","asClock","clearTimeout","setTimeout","getLSOrDefault","def","lsValue","localStorage","getItem","JSON","parse","e","console","error","setLS","setItem","stringify","App","blankPlayer","lastPlayers","lastAllocations","lastGameOptions","slotsPerPlayer","gameLength","perHalf","lastViewOptions","minutes","hasAllocations","length","playerState","setPlayerState","allocationState","setAllocationState","playerShowState","setPlayerShowState","isDrawn","setDrawn","gameOptions","setGameOptions","viewOptions","setViewOptions","onUpdatePlayerList","playerList","filter","_x","i","parseInt","currentTarget","dataset","updatedPlayers","target","newViewOptions","shuffleInPlace","array","j","random","src","Dinner","alt","PersonAddOutlined","DoneOutline","min","max","newGameOptions","checked","step","PeopleOutlined","playerCount","slotCount","allocationOrder","Array","reduce","allocs","_","makeAllocations","halfTime","halfTimeEntry","windowSecs","round","windows","allocations","w","halfTimeAllocation","findIndex","a","before","slice","after","splitBefore","splitAfter","ShuffleOutlined","HighlightOffOutlined","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.82b45449.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { DeleteOutline } from '@material-ui/icons'\n\nconst PlayerInput = ({ idx, player, onPlayerChange, onRemovePlayer }) => {\n  const playerId = `name-${idx}`;\n  return (\n    <div key={`Player-${idx}`} className={'inputrow'}>\n      <label htmlFor={playerId}>{`Player #${idx + 1}`}</label>\n      <input\n        type=\"text\"\n        name={playerId}\n        data-idx={idx}\n        id={playerId}\n        className=\"name\"\n        value={player.name}\n        onChange={onPlayerChange}\n      />\n      <button type=\"button\" className={'delete'} data-idx={idx} onClick={onRemovePlayer}><DeleteOutline/></button>\n    </div>\n  );\n};\n\nPlayerInput.propTypes = {\n  idx: PropTypes.number,\n  player: PropTypes.object,\n  onPlayerChange: PropTypes.func,\n  onRemoveChange: PropTypes.func,\n};\n\nexport default PlayerInput;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst asClock = x => {\n  const h = Math.floor(x/(60*60));\n  const m = Math.floor((x-(h*60*60))/60);\n  const s = x - ((h*60*60) + (m*60));\n  const pad = [h, m, s].map(v => (''+v).padStart(2, '0'));\n  return pad.join(':');\n}\n\nconst asMinutes = x => {\n  const m = Math.floor(x/60);\n  const s = x - (m*60);\n  return `${m}m ${s}s`;\n}\n\nconst TimelineRow = ({ idx, label, start, end, type, surprise, mode, onTimeClick }) => {\n\n  const [reveal, setReveal] = useState(!surprise);\n  let hideTimer = null;\n\n  const onReveal = () => {\n    if (surprise) {\n      setReveal(true);\n      if (hideTimer) {\n        clearTimeout(hideTimer);\n        hideTimer = null;\n      }\n      hideTimer = setTimeout(() => setReveal(false), 5000);\n    }\n  };\n\n  const asTime = (seconds) => {\n    return mode === 'minutes' ? asMinutes(seconds) : asClock(seconds);\n  }\n\n  if (type === 'marker') {\n    return (\n      <li key={`marker-${idx}`}>\n        <div className={'markertitle'}>\n          { `${label}` }\n        </div>\n        <div className={'markernumber'}>\n          <span onClick={onTimeClick}>{ `${asTime(start)}` }</span>\n        </div>\n      </li>\n    );\n  }\n  \n  return (\n    <li key={`player-${idx}`} className={`${surprise && reveal ? 'reveal' : ''}`}>\n      <div className={'line'}></div>\n      <div className={'title'} onClick={onReveal}>\n        { `${reveal ? label : 'Tap to reveal'}` }\n      </div>\n      <div className={'number'}>\n        <span onClick={onTimeClick}>{ `${asTime(start)}` }</span>\n        <span onClick={onTimeClick}>{ `${asTime(end)}` }</span>\n      </div>\n    </li>\n  );\n};\n\nTimelineRow.propTypes = {\n  idx: PropTypes.number,\n  label: PropTypes.string,\n  start: PropTypes.number,\n  end: PropTypes.number,\n  type: PropTypes.string,\n  surprise: PropTypes.bool,\n  mode: PropTypes.string,\n};\n\nexport default TimelineRow;","export default __webpack_public_path__ + \"static/media/dinner.029cd2f5.png\";","import React, { useState } from 'react';\nimport { ShuffleOutlined, PeopleOutlined, PersonAddOutlined, DoneOutline, HighlightOffOutlined } from '@material-ui/icons';\nimport './App.css';\nimport PlayerInput from './PlayerInput';\nimport TimelineRow from './TimelineRow';\nimport Dinner from './dinner.png';\n\nconst getLSOrDefault = (key, def) => {\n  const lsValue = localStorage.getItem(key);\n  if (lsValue) {\n    try {\n      return JSON.parse(lsValue);\n    } catch (e) {\n      console.error(`Can't parse value from localstorage, using default`, e);\n    }\n  }\n  return def;\n};\n\nconst setLS = (key, value) => {\n  localStorage.setItem(key, JSON.stringify(value));\n};\n\nfunction App() {\n  const blankPlayer = { name: ''};\n  const lastPlayers = getLSOrDefault('playerList', [{ ...blankPlayer },{ ...blankPlayer },{ ...blankPlayer }]);\n  const lastAllocations = getLSOrDefault('allocations', []);\n  const lastGameOptions = getLSOrDefault('gameOptions', { slotsPerPlayer: 2, gameLength: 5400, perHalf: false });\n  const lastViewOptions = getLSOrDefault('viewOptions', { minutes: false, surprise: false });\n  const hasAllocations = !!lastAllocations.length;\n\n  const [playerState, setPlayerState] = useState(lastPlayers);\n  const [allocationState, setAllocationState] = useState(lastAllocations);\n  const [playerShowState, setPlayerShowState] = useState(!hasAllocations);\n  const [isDrawn, setDrawn] = useState(hasAllocations);\n  const [gameOptions, setGameOptions] = useState(lastGameOptions);\n  const [viewOptions, setViewOptions] = useState(lastViewOptions);\n\n  const onUpdatePlayerList = playerList => {\n    setLS('playerList', playerList);\n    setPlayerState(playerList);\n  };\n\n  const onAddPlayer = () => {\n    onUpdatePlayerList([...playerState, { ...blankPlayer }]);\n  };\n\n  const onRemovePlayer = (e) => {\n    onUpdatePlayerList(playerState.filter((_x, i) => i !== parseInt(e.currentTarget.dataset.idx)));\n  };\n\n  const onPlayerChange = (e) => {\n    const updatedPlayers = [...playerState];\n    updatedPlayers[e.target.dataset.idx][e.target.className] = e.target.value;\n    onUpdatePlayerList(updatedPlayers);\n  };\n\n  const onCloseEditPlayers = () => {\n    setPlayerShowState(false);\n  };\n\n  const onEditPlayers = () => {\n    setPlayerShowState(true);\n  };\n\n  const onSlotsChange = (e) => {\n    const newGameOptions = { ...gameOptions, slotsPerPlayer: parseInt(e.target.value) };\n    setLS('gameOptions', newGameOptions);\n    setGameOptions(newGameOptions);\n  };\n\n  const onLengthChange = (e) => {\n    const newGameOptions = { ...gameOptions, gameLength: parseInt(e.target.value) * 60 };\n    setLS('gameOptions', newGameOptions);\n    setGameOptions(newGameOptions);\n  };\n\n  const onPerHalfChange = (e) => {\n    const newGameOptions = { ...gameOptions, perHalf: !!e.target.checked };\n    setLS('gameOptions', newGameOptions);\n    setGameOptions(newGameOptions);\n  };\n\n  const onSurpriseChange = (e) => {\n    const newViewOptions = { ...viewOptions, surprise: !!e.target.checked };\n    setLS('viewOptions', newViewOptions);\n    setViewOptions(newViewOptions);\n  };\n\n  const onTimeClick = () => {\n    const newViewOptions = { ...viewOptions, minutes: !viewOptions.minutes };\n    setLS('viewOptions', newViewOptions);\n    setViewOptions(newViewOptions);\n  };\n\n  const makeAllocations = (playerCount, slotsPerPlayer, perHalf) => {\n    if (perHalf) {\n      // Shuffle players separately for each batch of slots, then concat\n      // to ensure that each player has a slot in each round.\n      return [...Array(slotsPerPlayer)].reduce((allocs) => \n        [...allocs, ...shuffleInPlace([...Array(playerCount)].map((_, i) => i % playerCount))]\n      , []);\n    }\n    // Shuffle everything\n    const slotCount = playerCount * slotsPerPlayer;\n    return shuffleInPlace([...Array(slotCount)].map((_, i) => i % playerCount));\n  }\n\n  const onDraw = () => {\n    setDrawn(true);\n    // Shuffle and allocate slots\n    // Create array of indexes that we can shuffle\n    const playerCount = playerState.length;\n    const { slotsPerPlayer, gameLength, perHalf } = gameOptions;\n    const slotCount = playerCount * slotsPerPlayer;\n    const allocationOrder = makeAllocations(playerCount, slotsPerPlayer, perHalf);\n    // What size is each window\n    const halfTime = gameLength / 2;\n    const halfTimeEntry = { start: halfTime, end: halfTime, label: 'Half Time', type: 'marker' };\n    const windowSecs = Math.round(gameLength / slotCount);\n    // Make the windows, use allocationOrder as a way to have the same length\n    const windows = allocationOrder.reduce((windows, _, i) => \n      [...windows, { start: i * windowSecs, end: (i + 1) * windowSecs, type: 'allocation' }]\n    , []);\n    // Make sure the last window goes to the end\n    windows[slotCount - 1].end = gameLength;\n    // Allocate a player to each window\n    let allocations = windows.map((w, i) => ({ ...w, label: playerState[allocationOrder[i]].name }));\n    // Split an allocation that crosses half-time\n    const halfTimeAllocation = allocations.findIndex(a => a.start < halfTime && a.end> halfTime);\n    if (~halfTimeAllocation) {\n      const before = allocations.slice(0, halfTimeAllocation);\n      const after = allocations.slice(halfTimeAllocation + 1);\n      const splitBefore = { ...allocations[halfTimeAllocation], end: halfTime, type: 'allocation split' };\n      const splitAfter = { ...allocations[halfTimeAllocation], start: halfTime, type: 'allocation split' };\n      allocations = [...before, splitBefore, halfTimeEntry, splitAfter, ...after];\n    } else {\n      // Insert the halfTime entry\n      allocations = [...allocations.slice(0, allocations.length / 2), halfTimeEntry, ...allocations.slice(allocations.length / 2)];\n    }\n    setLS('allocations', allocations);\n    setAllocationState(allocations);\n  };\n\n  const shuffleInPlace = array => {\n    for (let i = array.length - 1; i> 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const onReset = () => {\n    setDrawn(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={Dinner} className=\"App-logo\" alt=\"dinner\" />\n      </header>\n      {\n        playerShowState ? (\n          /**\n           * Edit players mode\n           */\n          <div>\n            <p>\n              Who's playing?\n            </p>\n            {\n              playerState.map((player, idx) => \n                <PlayerInput\n                  key={`player-${idx}`}\n                  idx={idx}\n                  player={player}\n                  onPlayerChange={onPlayerChange}\n                  onRemovePlayer={onRemovePlayer}\n                />)\n            }\n            <div className={'buttonrow'}>\n              <button type=\"button\" onClick={onAddPlayer}><PersonAddOutlined /></button>\n              <button type=\"button\" onClick={onCloseEditPlayers}><DoneOutline /></button>\n            </div>\n          </div>\n        ) : (\n          /**\n           * Game mode\n           */\n          <div>\n            {\n              !isDrawn &&\n              <>\n                <p>\n                  Ready to play?\n                </p>\n                <div>\n                  { playerState.map(player => player.name).join(', ') }\n                </div>\n                <div className={'buttonrow'}>\n                  <label htmlFor=\"slots\">Slots per player: {gameOptions.slotsPerPlayer}</label>\n                  <input type=\"range\" id=\"slots\" min=\"1\" max=\"3\" value={gameOptions.slotsPerPlayer} onChange={onSlotsChange} className={'slider'} />\n                </div>\n                {\n                gameOptions.slotsPerPlayer > 1 && \n                <div className={'controlrow'}>\n                  <label>Slot per round </label>\n                  <label className={\"switch\"}>\n                    <input type=\"checkbox\" checked={gameOptions.perHalf} onChange={onPerHalfChange} />\n                    <span className={\"toggle\"}></span>\n                  </label>\n                </div>\n                }\n                <div className={'controlrow'}>\n                  <label htmlFor=\"len\">Game length (mins) </label>\n                  <input type=\"number\" id=\"len\" min=\"1\" step=\"1\" value={gameOptions.gameLength/60} onChange={onLengthChange} className={'shortnumber'}/>\n                </div>\n                <div className={'controlrow'}>\n                  <label>Surprise mode </label>\n                  <label className={\"switch\"}>\n                    <input type=\"checkbox\" checked={viewOptions.surprise} onChange={onSurpriseChange} />\n                    <span className={\"toggle\"}></span>\n                  </label>\n                </div>\n                <div className={'buttonrow'}>\n                  <button type=\"button\" onClick={onEditPlayers}><PeopleOutlined /></button>\n                  <button type=\"button\" onClick={onDraw}><ShuffleOutlined /></button>\n                </div>\n              </>\n            }\n            { isDrawn &&\n              <>\n                <div className={'timeline'}><ul>\n                  { allocationState.map(({ label, start, end, type }, idx) => \n                      <TimelineRow key={`row-${idx}`} label={label} start={start} end={end} type={type} idx={idx} surprise={viewOptions.surprise} mode={viewOptions.minutes ? 'minutes' : 'clock'} onTimeClick={onTimeClick} />\n                    )\n                  }\n                </ul></div>\n                <div className={'buttonrow'}>\n                  <button type=\"button\" onClick={onReset}><HighlightOffOutlined /></button>\n                </div>\n              </>\n            }\n          </div>\n        )\n      }\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}